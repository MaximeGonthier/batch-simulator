----------------------- REVIEW 1 ---------------------
SUBMISSION: 5415
TITLE: Locality-aware batch scheduling of I/O intensive workloads
AUTHORS: Maxime Gonthier, Loris Marchal, Samuel Thibault, Elisabeth Larsson and Carl Nettelblad

----------- Paper summary -----------
The authors describe 3 algorithms to schedule I/O workloads in a cluster with the goal of reducing the file load time. They use a simulation based mechanism to establish the performance of their algorithms using a real cluster workload. Their analysis demonstrates that the Locality and Eviction Mixed scheduler (a mix of EFT - earliest finish time and Locality and Eviction Aware) scheduler improves performance.
----------- Strengths -----------
- Formal modeling of I/O file sharing amongst compute jobs
-  Comparison of proposed algorithm with state of the art schedulers showing a benefit
-  Well written paper and the results section has well analyzed results
----------- Weaknesses -----------
-  The workload is not properly described. How large was the cluster, the number of jobs, how many files, what was the size of the files
- Establishing the validity of the problem by looking at how much file sharing is there in the trace
- What is the nature of the compute jobs? Are they distributed or are they CPU bound jobs. It is not clear why a solution like Hadoop could not have been tweaked because moving data is not only time consuming but also consumes power
----------- Detailed review -----------
Detailed comments below
- "a great number of users with diverse needs can contain structures
   that are non-trivial to replicate in a fully artificial simulated job pattern"; the authors should justify what these non trival structures are which are difficult to replicate. Their argument for using a simulation based approach is fine, but the above statement is without an example to back it up.
- There is no proper description of the workload logs that was used to drive the simulator. The paper just says that it contains submission time, size, stated wall clock time and actual time. What is size? Is it the size of the executable or the size of the memory that it actually ran on (peak)?  Does it also give number of required threads or will #threads be dynamically decided based on available cores - if so, the runtime on different machines will be different. #cores/username does not seem to be part of the dataset. Also, what is the distribution of #files/job ? Is the assumption that each job will access only one file.
- Is there a reference that demonstrates that file size is directly proportional to processing time for HPC applications? What is the distribution of file sizes for HPC applications?
- The assumption that jobs submitted by the same user use the same file (within an interval) seems fine, but how do we know that files across users are not shared? If jobs submitted by same users have same files, then we can adopt a simpler scheduling algorithm.
- There is no description of the simulator that was used.
- Why fix the load at 80% for the LEM? Would this not be configurable?
----------- Recommendation -----------
SCORE: 4 (borderline)
----- TEXT:
I am not really convinced on the methodology, but the analysis is fine. If the methodology can be better described, it would improve the paper.



----------------------- REVIEW 2 ---------------------
SUBMISSION: 5415
TITLE: Locality-aware batch scheduling of I/O intensive workloads
AUTHORS: Maxime Gonthier, Loris Marchal, Samuel Thibault, Elisabeth Larsson and Carl Nettelblad

----------- Paper summary -----------
In this paper, the authors present three schedulers distributing the load between nodes and re-using input files already loaded in local memory, avoiding the impact on other memory needs and reducing the job waiting time. The schedulers are evaluated using real cluster usage traces under simulation.
----------- Strengths -----------
1. The schedulers presented by the authors get considerable improvement compared to FCFS, at least on the workloads created by the authors.
2. Good analysis of the mean stretch's improvement from FCFS on all evaluated workloads.
----------- Weaknesses -----------
1. Unconvincing evaluation, lacking many important details.
2. Many design decisions discussions are missing from the design of the empirical evaluation.
3. Insufficiently deep discussion of the achieved experimental results. They are presented, but not thoroughly discussed together with their implications.
----------- Detailed review -----------
1. The authors should discuss more the meaning and importance of the historical data from one cluster in the context of the evaluation of the proposed algorithms and the claimed superiority of the LEA, LEO, and LEM. Could these algorithms be biased toward that dataset?

2. For the "mean stretch's improvement from FCFS", if I understand correctly, the authors only conduct the 5 schedulers on 44 different evaluated workloads once. Are these algorithms fully deterministic? Could results (slightly) change over many runs? We either need a deeper discussion on this or a large-scale statistical analysis to guarantee the conclusions of the study are good.

3. The authors mention that they avoid simulating the one-year workload, but they rather select a modest number --44 days, only 1/9 of the whole workload. What are the concerns here?

4. From the Figure 13, 14, and 16, and the authors mention as well, the results of EFT and LEO have lower variance than those of EFT and LEM. This is interesting. Unfortunately, the authors did not include further and deeper discussion on it.

5. The authors say they perform simulations based on logs of a real computing platform. But the details of the platform are missing, e.g., what is the scale of the platform, is it a public business or private platform? This information is missing, so it makes the reviewer feel vague about the workload convincing.

6. For the characteristics of the job, "The vast majority of jobs are single-node jobs, and few multi-nodes jobs [...]". The reader would like to see the statistics of the job types as those would strengthen the simulation results credibility. Same for the distribution of the job durations.

7. In the evaluation, the authors "evaluated 5 schedulers on 44 different days". Are these 44 days the same as the workloads picked from the whole workload previously? The reader needs more details here to understand how the proposed solutions outperform FCFS and EFT. If improperly chosen, the 44 days can possibly local optima for the proposed algorithms rather than the algorithms being superior for the whole dataset.
----------- Recommendation -----------
SCORE: 2 (reject)
----- TEXT:
insufficiently deep discussion of the achieved results and experimental design lacking a proper discussion of its key design decisions.



----------------------- REVIEW 3 ---------------------
SUBMISSION: 5415
TITLE: Locality-aware batch scheduling of I/O intensive workloads
AUTHORS: Maxime Gonthier, Loris Marchal, Samuel Thibault, Elisabeth Larsson and Carl Nettelblad

----------- Paper summary -----------
The paper proposes make job scheduling aware of large input files that might be reused in data intensive scenarios.
Three variants of data-aware job schedulers are presented to both limit/reduce data transfer caused waiting times in trade-off with load-balancing. Real cluster traces are used to perform simulations. The results indicate that data in local memory between successive jobs together with information about shared input files can be leveraged to reduce job waiting time and data transfer
----------- Strengths -----------

    Nice style of presentation and writing
    Formalization, variants and introduction of state-of-practice baselines
    Code and workloads shared

----------- Weaknesses -----------

    Simulation without real world deployment
    Assumptions/limitation not explicitly discussed

----------- Detailed review -----------
Strengths:

    The paper is well written, structured and easy to follow. Related work is presented early and grouped meaningful to extend the context for the reader.
    The problem is nicely formalized to unterstand the variants (LEA, LEO and LEM) compared against the state of practice (FCFS and EFT)
    The code and workloads are shared in an anonymized way for reproducibility. (Artifact not evaluated)
    The results are discussed with good detail and structure


Weaknesses:

    While this works appears self-contained, it would be nice to see how it would perform deployed in a real cluster
    Assumptions/limitiation can be found in the text, esp. Sec III but could be made more explicitas a compact list or section. While the assumptions of indepentent jobs and not considering output data appear somehow valid for classical batch processing, I would have much liked a discussion about possible extension towards workflow scheduling for tasks that depend on the output of a previous task. Here the output file in memory has similar potention for reuse.  



Minor remarks: Font in Fig5 need to be increased.
----------- Recommendation -----------
SCORE: 6 (accept)
----- TEXT:
no major weaknesses identified



